CONSTTK const
INTTK int
IDENFR A_GLOBAL
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR B_GLOBAL
ASSIGN =
INTCON 2
COMMA ,
IDENFR C_GLOBAL
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR D_GLOBAL
ASSIGN =
INTCON 4
COMMA ,
IDENFR E_GLOBAL
ASSIGN =
INTCON 5
COMMA ,
IDENFR F_GLOBAL
ASSIGN =
INTCON 6
SEMICN ;
CONSTTK const
INTTK int
IDENFR Arr1_1_GLOBAL
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR Arr2_1_GLOBAL
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR a_glogal
SEMICN ;
INTTK int
IDENFR arr1_1_global
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2_1_global
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
ERROR 多行注释没有结尾/
MULT *
MULT
MULT
IDENFR FuncDef
MULT *
IDENFR FuncDef
IDENFR
IDENFR FuncType
IDENFR Ident
IDENFR
LPARENT (
LPARENT
LBRACK [
IDENFR FuncFParams
RBRACK ]
RBRACK
RPARENT )
RPARENT
IDENFR Block
MULT *
IDENFR FuncType
IDENFR
IDENFR
VOIDTK void
VOIDTK
ERROR |定义有问题
ERROR
INTTK int
INTTK
MULT *
IDENFR testfile1
IDENFR
IDENFR
IDENFR
INTTK int
INTTK
INTTK
DIV /
DIV
DIV
MULT *
MULT *
IDENFR FuncFParams
IDENFR
IDENFR FuncFParam
LBRACE {
LBRACE
COMMA ,
COMMA
IDENFR FuncFParam
RBRACE }
MULT *
IDENFR FuncFParam
IDENFR
IDENFR BType
IDENFR Ident
LBRACK [
LBRACK
LBRACK [
LBRACK
LBRACK
RBRACK ]
RBRACK
LBRACE {
LBRACE
LBRACK [
LBRACK
IDENFR ConstExp
IDENFR
RBRACK ]
RBRACK
RBRACE }
RBRACK ]
MULT *
MULT *
MULT
MULT
MULT
MULT *
IDENFR Block
IDENFR
IDENFR
LBRACE {
LBRACE
LBRACE {
IDENFR BlockItem
RBRACE }
RBRACE
RBRACE }
RBRACE
MULT *
IDENFR BlockItem
IDENFR
IDENFR Decl
ERROR |定义有问题
IDENFR Stmt
MULT *
DIV /
ERROR 多行注释没有结尾/
ERROR
ERROR
IDENFR Stmt
MULT *
MULT
MULT
MULT
MULT
MULT
MULT
MULT
MULT
MULT
MULT
MULT
MULT *
IDENFR Stmt
IDENFR
IDENFR LVal
IDENFR
ASSIGN =
ASSIGN
IDENFR Exp
IDENFR
SEMICN ;
SEMICN
SEMICN
MULT *
ERROR |定义有问题
LBRACK [
IDENFR Exp
RBRACK ]
RBRACK
SEMICN ;
SEMICN
MULT *
ERROR |定义有问题
IDENFR Block
IDENFR
LPARENT (
LPARENT
LPARENT
LPARENT
LPARENT
LPARENT
LPARENT
IFTK if
MINU -
ELSETK else
ELSETK
ELSETK
WHILETK while
WHILETK
WHILETK
WHILETK
WHILETK
WHILETK
WHILETK
WHILETK
WHILETK
RPARENT )
MULT *
ERROR |定义有问题
ERROR
IFTK if
IFTK
IFTK
LPARENT (
LPARENT
IDENFR Cond
IDENFR
RPARENT )
RPARENT
IDENFR Stmt
LBRACK [
LBRACK
ELSETK else
ELSETK
IDENFR Stmt
RBRACK ]
MULT *
ERROR |定义有问题
ERROR
WHILETK while
WHILETK
WHILETK
LPARENT (
LPARENT
IDENFR Cond
IDENFR
RPARENT )
RPARENT
IDENFR Stmt
IDENFR
MULT *
ERROR |定义有问题
ERROR
BREAKTK break
BREAKTK
BREAKTK
SEMICN ;
SEMICN
SEMICN
MULT *
ERROR |定义有问题
ERROR
CONTINUETK continue
CONTINUETK
CONTINUETK
SEMICN ;
SEMICN
SEMICN
MULT *
ERROR |定义有问题
ERROR
RETURNTK return
RETURNTK
LBRACK [
IDENFR Exp
RBRACK ]
RBRACK
SEMICN ;
SEMICN
MULT *
ERROR |定义有问题
IDENFR LVal
IDENFR
ASSIGN =
ASSIGN
ASSIGN
GETINTTK getint
GETINTTK
GETINTTK
LPARENT (
LPARENT
LPARENT
RPARENT )
RPARENT
RPARENT
SEMICN ;
SEMICN
SEMICN
MULT *
ERROR |定义有问题
ERROR
PRINTFTK printf
PRINTFTK
PRINTFTK
LPARENT (
LPARENT
IDENFR FormatString
LBRACE {
LBRACE
COMMA ,
COMMA
IDENFR Exp
RBRACE }
RBRACE
RPARENT )
RPARENT
RPARENT
SEMICN ;
SEMICN
MULT *
MULT
MULT
MULT
IDENFR Exp
IDENFR
IDENFR AddExp
MULT *
MULT
MULT
MULT
MULT
MULT
IDENFR Cond
IDENFR
IDENFR LOrExp
MULT *
MULT
MULT
MULT
MULT
MULT
IDENFR LVal
IDENFR
IDENFR Ident
LBRACE {
LBRACE
LBRACK [
LBRACK
IDENFR Exp
IDENFR
RBRACK ]
RBRACK
RBRACE }
MULT *
MULT
MULT
MULT
MULT
MULT
IDENFR PrimaryExp
IDENFR
IDENFR
LPARENT (
LPARENT
IDENFR Exp
IDENFR
RPARENT )
RPARENT
ERROR |定义有问题
IDENFR LVal
ERROR |定义有问题
IDENFR Number
MULT *
MULT
MULT
IDENFR Number
IDENFR
IDENFR IntConst
MULT *
MULT *
MULT
MULT
MULT
MULT
MULT
IDENFR UnaryOp
IDENFR
IDENFR
PLUS +
PLUS
ERROR |定义有问题
ERROR
ERROR
ERROR
ERROR |定义有问题
ERROR
NOT !
NOT
NOT
NOT
NOT
NOT !
NOT
NOT
NOT
NOT
NOT
NOT
NOT
NOT
NOT
NOT
NOT
MULT *
MULT
MULT
MULT
MULT
MULT
IDENFR UnaryExp
IDENFR
IDENFR PrimaryExp
ERROR |定义有问题
IDENFR Ident
IDENFR
LPARENT (
LPARENT
LBRACK [
IDENFR FuncRParams
RBRACK ]
RBRACK
RPARENT )
RPARENT
MULT *
ERROR |定义有问题
IDENFR UnaryOp
IDENFR UnaryExp
IDENFR
MULT *
MULT
MULT
MULT
MULT
MULT
MULT
IDENFR MulExp
IDENFR
IDENFR UnaryExp
ERROR |定义有问题
IDENFR MulExp
LPARENT (
LPARENT
MULT *
MULT
ERROR |定义有问题
ERROR
DIV /
DIV
ERROR |定义有问题
ERROR
MOD %
MOD
RPARENT )
IDENFR UnaryExp
MULT *
MULT
MULT
MULT
MULT
MULT
IDENFR AddExp
IDENFR
IDENFR MulExp
ERROR |定义有问题
IDENFR AddExp
LPARENT (
LPARENT
PLUS +
PLUS
ERROR |定义有问题
ERROR
ERROR
ERROR
RPARENT )
IDENFR MulExp
MULT *
MULT
MULT
MULT
MULT
MULT
IDENFR RelExp
IDENFR
IDENFR AddExp
ERROR |定义有问题
IDENFR RelExp
LPARENT (
LPARENT
LSS <
LSS
ERROR |定义有问题
ERROR
GRE >
GRE
ERROR |定义有问题
ERROR
LEQ <=
LEQ
ERROR |定义有问题
ERROR
GEQ >=
GEQ
RPARENT )
IDENFR AddExp
MULT *
MULT
MULT
MULT
MULT
MULT
MULT
IDENFR EqExp
IDENFR
IDENFR RelExp
ERROR |定义有问题
IDENFR EqExp
LPARENT (
LPARENT
EQL ==
EQL
ERROR |定义有问题
ERROR
NEQ !=
NEQ
RPARENT )
IDENFR RelExp
MULT *
MULT
MULT
MULT
MULT
MULT
MULT
IDENFR LAndExp
IDENFR
IDENFR EqExp
ERROR |定义有问题
IDENFR LAndExp
IDENFR
AND &&
AND
IDENFR EqExp
MULT *
MULT
MULT
MULT
MULT
MULT
MULT
IDENFR LOrExp
IDENFR
IDENFR LAndExp
ERROR |定义有问题
IDENFR LOrExp
IDENFR
OR ||
OR
IDENFR LAndExp
MULT *
DIV /
ERROR 多行注释没有结尾/
MULT *
IDENFR FuncDef
IDENFR
IDENFR FuncType
IDENFR Ident
IDENFR
LPARENT (
LPARENT
LBRACK [
IDENFR FuncFParams
RBRACK ]
RBRACK
RPARENT )
RPARENT
IDENFR Block
MULT *
DIV /
INTTK int
IDENFR func_params
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR d
ASSIGN =
IDENFR a
MULT *
INTCON 2
PLUS +
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
MOD %
INTCON 2
PLUS +
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MOD %
INTCON 3
SEMICN ;
IDENFR a_glogal
ASSIGN =
IDENFR d
MULT *
LPARENT (
IDENFR a
PLUS +
INTCON 2
RPARENT )
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR a_glogal
LSS <
INTCON 50
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Now a_global is %d, it is < 50.\n"
COMMA ,
IDENFR a_glogal
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a_glogal
EQL ==
INTCON 50
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Now a_global is exactly 50!!!.\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Now a_global is %d, it is > 50.\n"
COMMA ,
IDENFR a_glogal
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func2_params
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
INTTK int
IDENFR res
ASSIGN =
INTCON 6
MULT *
LPARENT (
IDENFR a
PLUS +
IDENFR b
PLUS +
IDENFR c
RPARENT )
DIV /
INTCON 2
MINU -
INTCON 2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "I am a function with 3 param: {{ %d, %d, %d }} and I return %d.\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR res
RPARENT )
SEMICN ;
RETURNTK return
IDENFR res
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func3_params
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "I am a function with only one param: {{ %d }} and I return noting.\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func4_params
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "I am a function with 2 param: {{ %d, %d }} and I return noting.\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func_no_params
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "I am a function without params and I return 0.\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2_no_params
LPARENT (
RPARENT )
LBRACE {
RBRACE }
ERROR 多行注释没有结尾/
MULT *
MULT
MULT
MULT
MULT
MULT
IDENFR MainFuncDef
IDENFR
IDENFR
INTTK int
INTTK
INTTK
MAINTK main
MAINTK
MAINTK
LPARENT (
LPARENT
LPARENT
RPARENT )
RPARENT
IDENFR Block
MULT *
DIV /
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR main_var_a
COMMA ,
IDENFR main_var_b
COMMA ,
IDENFR main_var_c
SEMICN ;
IDENFR main_var_a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR main_var_b
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19241091\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "A_GLOBAL = %d\n"
COMMA ,
IDENFR A_GLOBAL
RPARENT )
SEMICN ;
IDENFR func3_params
LPARENT (
IDENFR C_GLOBAL
RPARENT )
SEMICN ;
IDENFR func4_params
LPARENT (
IDENFR A_GLOBAL
COMMA ,
IDENFR B_GLOBAL
RPARENT )
SEMICN ;
IDENFR func_no_params
LPARENT (
RPARENT )
SEMICN ;
IDENFR func2_no_params
LPARENT (
RPARENT )
SEMICN ;
IDENFR arr1_1_global
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 2
SEMICN ;
IDENFR arr1_1_global
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
IDENFR C_GLOBAL
SEMICN ;
IDENFR arr1_1_global
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR Arr1_1_GLOBAL
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
IDENFR arr2_1_global
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR Arr2_1_GLOBAL
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR arr2_1_global
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LPARENT (
IDENFR arr1_1_global
LBRACK [
INTCON 1
RBRACK ]
MULT *
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "arr2_1_global[1][1] is %d\n"
COMMA ,
IDENFR arr2_1_global
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR func_params
LPARENT (
IDENFR A_GLOBAL
COMMA ,
IDENFR arr1_1_global
COMMA ,
IDENFR arr2_1_global
RPARENT )
SEMICN ;
IDENFR main_var_c
ASSIGN =
IDENFR func2_params
LPARENT (
IDENFR B_GLOBAL
COMMA ,
IDENFR arr1_1_global
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR arr2_1_global
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Now main_var_c is %d\n"
COMMA ,
IDENFR main_var_c
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR main_var_a
MOD %
INTCON 7
NEQ !=
INTCON 0
AND &&
IDENFR main_var_b
MOD %
INTCON 7
NEQ !=
INTCON 0
RPARENT )
LBRACE {
WHILETK while
LPARENT (
NOT !
IDENFR main_var_a
RPARENT )
LBRACE {
IDENFR main_var_a
ASSIGN =
IDENFR main_var_a
PLUS +
IDENFR main_var_b
SEMICN ;
IFTK if
LPARENT (
IDENFR main_var_a
MOD %
INTCON 7
EQL ==
INTCON 0
OR ||
IDENFR main_var_a
GRE >
INTCON 100
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR main_var_a
GEQ >=
INTCON 30
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Now main_var_a is %d, it is >= 30\n"
COMMA ,
IDENFR main_var_a
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR main_var_a
LEQ <=
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Now main_var_a is %d, it is <= 10\n"
COMMA ,
IDENFR main_var_a
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Now main_var_a is %d, it is > 10 and < 30\n"
COMMA ,
IDENFR main_var_a
RPARENT )
SEMICN ;
RBRACE }
IDENFR main_var_a
ASSIGN =
MINU -
IDENFR main_var_a
SEMICN ;
IDENFR main_var_b
ASSIGN =
PLUS +
IDENFR main_var_b
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "==================testfile1 end=================="
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
